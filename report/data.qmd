# 2 Data

```{r, echo = FALSE, message = FALSE}
source(here::here("scripts/setup.R"))
```
__TO DO's__

* Wrangling/cleaning
* Sources - TBS
* Description - In progress
* Wrangling/cleaning - In progress
* Spotting mistakes and missing data (could be part of EDA too) - TBD
* Listing anomalies and outliers (could be part of EDA too) - TBD


## 2.1 Raw Datasets

The datasets encompass:

- **Vehicle Registrations**: Detailed regional breakdowns showing vehicle type, fuel type, and numbers across years.
- **Google Trends**: Time-series data showcasing the interest in electric vehicles and environmental topics over time.
- **Oil Prices**: Time-series data indicating Brent oil price fluctuations over the years.
- **Demographics**: Indicators like population growth, immigration, emigration, gender statistics, and more, which can influence vehicle adoption patterns.

```{r}
# Reading the data
vehicle_data_2005_2008 <- read.csv("../data/road_vehicle_CH_2005-2008.csv")
vehicle_data_2009_2022 <- read.csv("../data/road_vehicle_CH_2009-2022.csv")
google_trends_data <- read.csv("../data/google_trend_EV_2004-2023.csv")
oil_prices_data <- read.csv("../data/BrentOilPrices.csv")
demographic_data <- read.csv("../data/demographic.csv")
france_v <- read_excel("../data/parc_vp_france_2022.xlsx",sheet = 2)
```

### 2.1.1 Swiss Vehicle Registration Dataset

* Description
New registrations of road vehicles by vehicle group and type Results by canton, vehicle group, vehicle type, fuel, month and year

```{r}
# Create a tibble with variable descriptions
variable_table_vehicle <- tibble(
  Variables = c("Canton", "Vehicle group / type", "Fuel", "Month", "2009-2022"),
  Meaning = c(
    "The region in Switzerland.",
    "Type or group of the vehicle.",
    "Type of fuel used by the vehicle.",
    "The month of the data.",
    "Number of vehicles for each respective year. Each with it's own column"
  )
)

# Display the table using kableExtra
variable_table_vehicle %>%
  kbl() %>%
  kable_styling(position = "center")
```


* Source
 https://www.bfs.admin.ch/bfs/en/home/statistics/catalogues-databases/data.assetdetail.24105892.html


### 2.1.2 Oil price Dataset

* description
some text about the dataset

```{r}
# Create a tibble with variable descriptions
variable_table <- tibble(
  Variables = c("Date", "Price"),
  Meaning = c(
    "The date when the price was recorded. It seems to be in a day-month-short_year format.",
    "The price of Brent Oil on the given date."
  )
)

# Display the table using kableExtra
variable_table %>%
  kbl() %>%
  kable_styling(position = "center")
```


* source

### 2.1.3 Swiss Demographics Dataset

* description

```{r}
# Create a tibble with variable descriptions
variable_table <- tibble(
  Variables = c(
    "Year", "Citizenship (category)", "Sex", "Age", "Population on 1 January", 
    "Live birth", "Death", "Natural change", 
    "Immigration incl. change of population type", "Emigration", 
    "Net migration incl. change of population type", 
    "Change of population type", "Acquisition of Swiss citizenship", 
    "Gender change in the civil register (entry)", 
    "Gender change in the civil register (exit)", "Statistical adjustment", 
    "Population on 31 December", "Population change"
  ),
  Meaning = c(
    "The year of the demographic data.",
    "The categorization of the citizenship status.",
    "Gender category.",
    "Age category.",
    "Population count at the beginning of the year.",
    "Number of births in the year.",
    "Number of deaths in the year.",
    "Change in the population due to births and deaths.",
    "Number of immigrants, including change of population type.",
    "Number of emigrations.",
    "Net migration count, including change of population type.",
    "Change in the categorization of the population.",
    "Number of individuals who acquired Swiss citizenship.",
    "Number of gender changes registered (entry).",
    "Number of gender changes registered (exit).",
    "Adjustments made to the data for accuracy.",
    "Population count at the end of the year.",
    "Change in population over the year."
  )
)

# Display the table using kableExtra
variable_table %>%
  kbl() %>%
  kable_styling(position = "center")
```


* source

### 2.1.4 Google trend data

```{r}

```

* description

* source

### 2.1.5 French vehicle registration data

* description

* source

## 2.2 Data Wrangling


## 2.2.1 Data Wrangling : Oil clean

```{r}
# Change date column into Day

# Two types of format: one format before 22.04.2020,a different format after

# 22.04.2020 is on row 8361
# Format 1: 15-Apr-2020
oil_df_1 <- oil_prices_data[0:8360,] |>
  separate(Date, into = c("Day", "Month", "Year"), sep = "-")

# Format 2 : Apr 22, 2020
oil_df_2 <- oil_prices_data[8361:nrow(oil_prices_data),] |>
  separate(Date, into = c("Month", "Day", "Year"), sep = " |, ")

# Check for NAs
print(which(rowSums(is.na(oil_df_1)) > 0))
print(which(rowSums(is.na(oil_df_2)) > 0))

# We don't need dates before 2005
oil_df_1 <- oil_df_1[4486:nrow(oil_df_1),]

# Years in same format for both
oil_df_1$Year <- paste0("20", oil_df_1$Year)

# Change the order of both dataframes
oil_df_1 <- oil_df_1 %>%
  select("Year", "Month", "Day", "Price")

oil_df_2 <- oil_df_2 %>%
  select("Year", "Month", "Day", "Price")

# Merging both dataframes together
oil_df <- rbind(oil_df_1, oil_df_2)

# We want all our data to have the same date format #YYYY-MM-DD

# First we create a df to change the current month format to numbers
months_numbers <- data.frame(
  current_month_format = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"),
  numbers = 1:12
)

# Then we update our oil_data
oil_df <- oil_df %>%
  left_join(months_numbers, by = c("Month" = "current_month_format")) %>%
  select(Year, numbers, Day, Price) %>%
  rename(Months = numbers)

# Regroup the date in 1 column
oil_df <- oil_df %>%
  mutate(Date = as.Date(paste(Year, Months, Day, sep = "-"))) %>%
  select(Date, Price)


# Displayed clean data
head(oil_df)
```

## 2.2.2 Data Wrangling : Google trend clean
```{r}
head(google_trends_data)

# For this one, we need to remove the dates from the index
google_trends_data <- google_trends_data |>
  rownames_to_column(var = "Date")

# Remove the first row using slice
google_trends_data <- slice(google_trends_data, -1)

#check for NA
sum(is.na(google_trends_data$Date))
sum(is.na(google_trends_data$Catégorie...Toutes.catégories))

#renaming col
colnames(google_trends_data)[2] <- "SearchCount"

#convert to numeric
google_trends_data$SearchCount <- as.numeric(google_trends_data$SearchCount)


# Convert the column to date with the desired format
google_trends_data$Date <- as.Date(paste(google_trends_data$Date, "01", sep = "-"))

#Display dataset
head(google_trends_data)
```

## 2.2.3 Data Wrangling : Swiss vehicle clean

### Cleaning of road_vehicle_CH_2009-2022.csv

#### Redundancy

The dataset, representing new vehicle registrations in Switzerland from 2005 onwards, exhibited redundancy in its structure. For example, the data contained both main categories (like '> Passenger cars') and their respective sub-categories ('... Passenger car' and '.. Heavy passenger car'). On examination, it was observed that the counts under the main categories were simply aggregates of the counts of their sub-categories. Such redundancy could lead to double counting in analytical processes.

```{r}
##### 1st data 2005 to 2008 clean #####
# remove the main categories to avoid  and to work with a more granular dataset.
# Filter out main categories (rows starting with '>')
v_2005_2008 <- vehicle_data_2005_2008 |>
  filter(!grepl("^>", trimws(Vehicle.group...type)))
#rename the Vehicle.group...type column to VehicleType and clean the observations' names
v_2005_2008 <- v_2005_2008 |>
  rename(Location = Canton,
         VehicleType = Vehicle.group...type) |>
  mutate(VehicleType = str_remove(VehicleType, "^\\.\\.\\.\\s*"))


# Year Extraction, Reshape the dataset from wide to long format
v_2005_2008 <- v_2005_2008 |>
  pivot_longer(cols = `X2005`:`X2008`, names_to = "Year", values_to = "Count")
# Remove the "X" prefix from the Year column
v_2005_2008$Year <- gsub("X", "", v_2005_2008$Year)


##### 2nd data 2009 to 2022 clean #####
# Filter out main categories (rows starting with '>')
v_2009_2022 <- vehicle_data_2009_2022 |>
  filter(!grepl("^>", trimws(Vehicle.group...type)))
#rename the Vehicle.group...type column to VehicleType and clean the observations' names
v_2009_2022 <- v_2009_2022 |>
  rename(Location = Canton,
         VehicleType = Vehicle.group...type) |>
  mutate(VehicleType = str_remove(VehicleType, "^\\.\\.\\.\\s*"))

# Year Extraction, Reshape the dataset from wide to long format
v_2009_2022 <- v_2009_2022 |>
  pivot_longer(cols = `X2009`:`X2022`, names_to = "Year", values_to = "Count")
# Remove the "X" prefix from the Year column
v_2009_2022$Year <- gsub("X", "", v_2009_2022$Year)
```

#### Merging and Joining
As the vehicle data was split across multiple files, it was necessary to combine them for a holistic view.

```{r}
df_v <- bind_rows(v_2005_2008, v_2009_2022)
df_v <- df_v |>
  arrange(df_v$Year)
```

#### encoding, renaming, date col

* Some of the canton names have special characters that haven't been encoded properly in the dataset, causing them to display as hexadecimal escape sequences.
* We consolidated the 'Year' and 'Month' columns into a singular 'Date' column, converting them into a standard date format. This transformation streamlines time series analyses and provides a more intuitive representation of the data's temporal dimension.
```{r}
#### canton ####
df_v$Location <- iconv(df_v$Location, from = "latin1", to = "UTF-8")

# keep only the first name when multiple names are provided for cantons (separated by slashes)
df_v$Location <- sapply(str_split(df_v$Location, " / "), `[`, 1)


#### Year ####
#create date col
# Convert month names to month numbers
df_v$MonthNum <- match(df_v$Month, month.name)
# Combine Year, MonthNum, and "01" to create a date in the format "YYYY-MM-01"
df_v$Date <- as.Date(paste(df_v$Year, df_v$MonthNum, "01", sep = "-"), format = "%Y-%m-%d")
# Drop the Month, Year, and MonthNum columns
df_v <- df_v %>% select(-Month, -Year, -MonthNum)


#### renaming ####
#renaming the 4 different hybrid name to only two
df_v <- df_v |>
  mutate(Fuel = case_when(
    Fuel %in% c("Petrol-electricity: conventional hybrid", "Diesel-electricity: conventional hybrid") ~ "Conventional hybrid",
    Fuel %in% c("Petrol-electricity: plug-in hybrid", "Diesel-electricity: plug-in hybrid") ~ "Plug-in hybrid",
    TRUE ~ Fuel # Keeps all other fuel types as they are
  ))

#renaming fuel type: gas
df_v <- df_v |>
  mutate(Fuel = if_else(Fuel == "Gas (monovalent and bivalent)", "Gas", Fuel))
```

* Conventional hybrids (petrol-electricity or diesel-electricity without plug-in capability) have been around longer and may have a different adoption trend compared to newer technologies.

* Plug-in hybrids have larger batteries and can be charged from an electric outlet, allowing for all-electric operation for limited distances, which might influence their adoption differently due to the need for charging infrastructure.


```{r}
head(df_v)
#count nbr of vehicle for a paticular year and 
vehicle_count_2022 <- df_v |>
  filter(Location == "Switzerland", year(Date) == 2023, VehicleType == "Passenger car") |>
  summarize(TotalCount = sum(Count))

#print(vehicle_count_2022)
```


#### Rows with 0
Retaining rows with a Count of 0 ensures the completeness of our dataset, indicating periods when specific vehicle types or fuel categories had no registrations. This not only provides a holistic view of vehicle adoption trends over time but also aids in generating continuous time series visualizations without gaps, offering a true representation of the data.



## 2.2.4 Data wrangling French vehicle clean

This dataset will be used to compare our data in Switzerland with a bordering country (FR)

It is important to note that this data set contains all registered vehicles in a given year (vs. all new registered cars for our Swiss data)
We will only keep the vehicles used for personal use (not the ones for professional use), to match our Swiss dataset

We decided to remove some anecdotal observations (i.e Hydrogen, Unknown, etc.) as their production / use is marginal. Moreover, we have decided to regroup the different kind of hybrid motors into a single "Hybrid" category.

```{r}

# the first three rows are empty
france_v <- france_v[- c(1,2,3),]

# Only taking the private cars from this data
france_private <- france_v[25:37,]


# pivoting to match the Swiss data set and correctly setting the column names
france_private <- t(france_private)
colnames(france_private) <- france_private[1,]
france_private <- france_private[-1,]

# Removing "Particulier" ( =aggregate of all categories), "Gaz" (<1% of cars), "Unknown" (muddies the data), "Hydrogen (anecdotal observations)
france_private <- as_tibble(france_private)

france_private <- france_private %>%
  select(-c("Particulier", "Gaz", "Gaz HNR", "Gaz HR", "Hydrogène et autre ZE", "Inconnu"))

# Add info about the year
france_private <- france_private %>%
  mutate(Year = 2011:2022)

# Removing the decimals due to previous manipulations
for (i in 1:(ncol(france_private) - 2)) {  # Exclude the last two columns (Year and Hybrid)
  france_private[12, i] <- as.character(floor(as.numeric(france_private[12, i])))
}

# Creating the Hybrid category (aggregating the different kinds of hybrid) and removing the aggregated columns
france_private <- france_private %>%
  mutate(Hybrid = as.numeric(`Diesel HNR`) + as.numeric(`Diesel HR`) + as.numeric(`Essence HNR`) + as.numeric(`Essence HR`))

france_private <- france_private %>%
  select(Diesel, Essence, Hybrid, Electrique, Year)

head(france_private)

```


# 3 Exploratory data analysis

```{r, echo = FALSE, message = FALSE}
source(here::here("scripts/setup.R"))
```

## 3.1 Switzerland
### 3.1.1 sesonality
```{r}
# Filter for only Passenger car vehicle type and summarize
passenger_cars <- df_v %>%
  filter(VehicleType == "Passenger car") %>%
  group_by(Date) %>%
  summarise(Count = sum(Count, na.rm = TRUE), .groups = 'drop')

# Create the ggplot object
p <- ggplot(passenger_cars, aes(x = Date, y = Count)) +
  geom_line(color = "darkblue", size = 0.5) +
  labs(title = "Passenger Car Adoption Over Time in Switzerland",
       x = "Date",
       y = "Number of Passenger Cars Registered") +
  theme_minimal() +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
  geom_smooth(method = "loess", se = FALSE, color = "blue") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Convert to an interactive plotly object
interactive_plot <- ggplotly(p)

# Display the interactive plot
interactive_plot
```

The blue line represents a smoothed trend, indicating an initial increase in car registrations until around 2014-2015, followed by a gradual decline. The black line shows the actual number of cars registered, with significant variability. We will call this variation seasonality which is better represented in the following graph. 

```{r}
# Filter for only Passenger car vehicle type and summarize by year and month
passenger_cars <- df_v %>%
  filter(VehicleType == "Passenger car") %>%
  mutate(Year = year(Date), Month = factor(month(Date), levels = 1:12, labels = month.abb)) %>%  # Use abbreviated month names
  group_by(Year, Month) %>%
  summarise(Count = sum(Count, na.rm = TRUE), .groups = 'drop')

# Plotting the data with ggplot2, showing the trend within each year
p <- ggplot(passenger_cars, aes(x = Month, y = Count, group = Year, color = as.factor(Year))) +
  geom_smooth(se = FALSE, method = "loess", span = 0.5, size = 0.7) +
  labs(title = "Monthly Passenger Car Registrations by Year",
       x = "Month",
       y = "Number of Passenger Cars Registered",
       color = "Year") +
  theme_minimal() +
  scale_color_viridis_d() +
  theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 1))

# Convert to an interactive plotly object
interactive_plot <- ggplotly(p)

# Adjust plotly settings if needed, such as margins or layout
interactive_plot <- interactive_plot %>%
  layout(margin = list(l = 40, r = 10, b = 40, t = 40), # Adjust margins
         legend = list(orientation = "h", x = 0, xanchor = "left", y = -0.2)) # Adjust legend position

# Display the interactive plot
interactive_plot
```

This pattern suggests a seasonal trend with a mid-year peak and a year-end increase. 2020 reacts differently than other years. We suggest that it is probably related to Covid policies. 


```{r}
# Filter for only Passenger car vehicle type and summarize by year and month
passenger_cars <- df_v %>%
  filter(VehicleType == "Passenger car") %>%
  mutate(Year = year(Date), Month = month(Date)) %>%
  group_by(Year, Month) %>%
  summarise(Count = sum(Count, na.rm = TRUE), .groups = 'drop') %>%
  mutate(Month = factor(Month, levels = 1:12, labels = month.abb))  # Convert Month to a factor to ensure proper ordering in the plot

# Plotting the data with ggplot2, showing the trend within each year
p <- ggplot(passenger_cars, aes(x = Month, y = Count, group = Year, color = as.factor(Year))) +
  geom_line() +
  facet_wrap(~ Year, scales = "free_y") +  # Facet by year with free y scales
  labs(title = "Seasonal Trends in Passenger Car Registrations",
       x = "Month",
       y = "Number of Passenger Cars Registered") +
  theme_minimal() +
  scale_color_viridis_d(guide = FALSE) +  # Use viridis color scale and remove the guide/legend
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotate x-axis labels by 45 degrees
  theme(axis.text.x = element_blank(), # This will remove the month labels
        axis.text.y = element_blank(), # This will remove the month labels
        axis.ticks.x = element_blank(), # This will remove the ticks on the x-axis
        legend.position = "none") # Remove the legend to clean up the plot

# Convert to an interactive plotly object
interactive_plot <- ggplotly(p) %>%
  layout(xaxis = list(tickmode = "array",
                      tickvals = 1:12,
                      ticktext = month.abb))

# Display the interactive plot
interactive_plot
```

This version of the graphs helps us visualizing the evolution of registration for each year individually. As mentioned above, 2020 is the only year which show a decreasing peak instead of an increasing one as it is presented for all other years. 

### 3.1.2 Vehicule Registration by Fuel time over time

```{r}
# Filter df_v for specific fuel types and vehicle type
filtered_df <- df_v %>%
  filter(Fuel %in% c("Petrol", "Diesel", "Conventional hybrid", "Plug-in hybrid", "Electricity") &
         VehicleType == "Passenger car")

# Group by Date and Fuel type, and summarize the count
fuel_type_trends <- filtered_df %>%
  group_by(Date, Fuel) %>%
  summarize(Count = sum(Count, na.rm = TRUE)) %>%
  ungroup()

# Plotting the trends over time by fuel type
ggplot(fuel_type_trends, aes(x = Date, y = Count, color = Fuel)) +
  geom_line(stat = "smooth", se = FALSE, method = "loess", span = 0.1, size = 1) +
  labs(title = "Vehicle Registrations by Fuel Type Over Time",
       x = "Date",
       y = "Number of Vehicles Registered") +
  theme_minimal() +
  theme(legend.position = "bottom")
```

The graph above shows the vehicle registrations in Switzerland by fuel type from 2005 to 2023. 

On the one hand, it highlights the recent decrease in new registrations of thermic vehicles since 2017. On the other hand, the three EVs named as Conventional and Plug-in hybrids along with electricity ones are gradually increasing since approximately the same period. (In fact, fully electric cars and Conventional hybrids have even reached a higher level of vehicle registration in the past years, spotlighting the EV tendency in recent years.) 


### 3.1.3 Map
#### 3.1.4.1 Count of Electricity car Registration for all years per cantons

`swissBOUNDARIES3D_1_4_TLM_KANTONSGEBIET.shp` contains the boundaries of the cantons of Switzerland.
```{r}
df_v_map <- df_v |>
  filter(!Location %in% c("Switzerland", "Confederation"))
# Mapping between canton abbreviations and numbers
# Define a vector of the abbreviation values in the desired order
abbreviation_values <- c("ZH", "BE", "LU", "UR", "SZ", "OW", "NW", "GL", "ZG", "FR", "SO", "BS", "BL", "SH", "AR", "AI", "SG", "GR", "AG", "TG", "TI", "VD", "VS", "NE", "GE", "JU")

# Use the match function to create the new column
df_v_map$KANTONSNUM <- match(df_v_map$Location, abbreviation_values)

swiss_cantons <- st_read("../data/CH_map/swissBOUNDARIES3D_1_4_TLM_KANTONSGEBIET.shp")

# Aggregate the data
preprocessed_data <- df_v_map %>%
  group_by(Fuel, VehicleType, Year = format(as.Date(Date), "%Y"), KANTONSNUM) %>%
  summarize(Total = sum(Count), .groups = 'drop')

# Ensure KANTONSNUM is correctly formatted in both datasets
df_v_map$KANTONSNUM <- as.numeric(as.character(df_v_map$KANTONSNUM))
swiss_cantons$KANTONSNUM <- as.numeric(as.character(swiss_cantons$KANTONSNUM))

# Filter and aggregate df_v data
filtered_data <- df_v_map %>%
  filter(Fuel == "Electricity", VehicleType == "Passenger car") %>%
  group_by(KANTONSNUM) %>%
  summarize(Total = sum(Count))

# Merge with shapefile data
map_data <- merge(swiss_cantons, filtered_data, by = "KANTONSNUM")

# Create a ggplot
p <- ggplot() +
  geom_sf(data = map_data, aes(fill = Total), color = NA) +
  scale_fill_viridis_c() +
  theme_minimal()

# Convert to interactive plotly plot
ggplotly(p)
```

## 3.2 Google Trend
```{r}
ggplot(df_gtrends, aes(x = Date, y = SearchRatio)) +
  geom_line(color = "darkgreen", size = 1, stat='smooth', se = FALSE, method = "loess", span = 0.1, size = 1) +
  labs(x = "Date", y = "Google Search", title = "Google search About EV in Switzerland")
```

Another interesting point to look out is the Google search about EV engine in Switzerland. As we can see, it seems to have skyrocketed since 2016. This allows us to get an overview of the Swiss population interest concerning this topic and comfort us towards our initial predictions.  

## 3.3 Oil
```{r}
ggplot(df_oil, aes(x = Date , y = Price)) +
  geom_line(color = "darkred", size = 1) +
  labs(x = "Date", y = "Price", title = "Oil Price Over Time")
```
The above chart represents the oil price evolution through the last two decades. We can observe a quite high degree of volatility concerning the oil valuation. Nevertheless, it seems important to highlight that this value has greatly increased since the past 3 years.

## 3.4 Demographics
```{r}
demographic_data <- df_demographic %>%
  mutate(Population = `Generation Z` + `Millenials` + `Generation X` + `Baby Boomers`)

# Plotting the data
ggplot(demographic_data, aes(x = Year)) +
  geom_line(aes(y = `Generation Z`, color = "Generation Z"), size = 1) +
  geom_line(aes(y = Millenials, color = "Millenials"), size = 1) +
  geom_line(aes(y = `Generation X`, color = "Generation X"), size = 1) +
  geom_line(aes(y = `Baby Boomers`, color = "Baby Boomers"), size = 1) +
  labs(title = "Demographic Trends in Switzerland",
       x = "Year",
       y = "Population",
       color = "Generation") +
  theme_minimal() +
  theme(legend.position = "bottom") +
  scale_color_manual(values = c("Generation Z" = "blue", "Millenials" = "red", "Generation X" = "green", "Baby Boomers" = "purple"))

```

This graph concentrates on the demographic trends’ evolution for each segment of age abovementioned throughout the time. It points out the important overall rise of individuals living in Switzerland over the past two decades.

## 3.5 French vehicles
### 3.5.1 Total vehicules evolution France
```{r}
# Select relevant columns for plotting
registration_data <- df_v_fr[, c("Date", "Diesel", "Essence", "Conventional_Hybrid", "Plug_in_Hybrid", "Electrique")]

# Plotting log-scale evolution of car registrations
ggplot(registration_data, aes(x = Date)) +
  geom_line(aes(y = log(Diesel), color = "Diesel")) +
  geom_line(aes(y = log(Essence), color = "Essence")) +
  geom_line(aes(y = log(Conventional_Hybrid), color = "Conventional Hybrid")) +
  geom_line(aes(y = log(Plug_in_Hybrid), color = "Plug-in Hybrid")) +
  geom_line(aes(y = log(Electrique), color = "Electrique")) +
  scale_color_manual(values = c("Diesel" = "red", "Essence" = "blue", 
                                 "Conventional Hybrid" = "green", "Plug-in Hybrid" = "purple", 
                                 "Electrique" = "orange")) +
  labs(x = "Date", y = "Log-Scale Count", color = "Fuel Type") +
  theme_minimal()


```

### 3.5.2 Deltas evolution
```{r}
# Plotting for total cars
ggplot(df_v_fr, aes(x = Date, y = Diesel_delta, color = "Diesel")) +
  geom_line(size = 1) +
  geom_line(aes(y = Essence_delta, color = "Petrol"), size = 1) +
  geom_line(aes(y = Conventional_Hybrid_delta, color = "Conventional hybrid"), size = 1) +
  geom_line(aes(y = Plug_in_Hybrid_delta, color = "Plug-in hybrid"), size = 1) +
  geom_line(aes(y = Electrique_delta, color = "Electricity"), size = 1) +
  labs(title = "Evolution of cars registered in France over the years by fuel type (Deltas)",
       x = "Years",
       y = "Value",
       color = "Fuel Category") +
  theme_minimal() +
  scale_color_manual(values = c("Diesel" = "red", "Petrol" = "blue", 
                                 "Conventional hybrid" = "green", "Plug-in hybrid" = "purple",
                                 "Electricity" = "orange"))

```


## 3.6 Swiss vs France
### 3.6.1 Electric vs Hybrid vs Petrol

Here we compare and visualize specific vehicle fuel types between Swiss and French datasets.

The thicker line are the for **Switzerland**, the others are for **France**. We standardized the counts in both the Swiss and French datas ets for comparison purposes. Please juggle with the interactive plot to make it more readable.
```{r}
# Filtering Swiss data for specific fuel types
swiss_specific_fuel <- df_v %>%
  filter(Fuel %in% c("Diesel", "Electricity", "Conventional hybrid", "Plug-in hybrid", "Petrol")) %>%
  filter(Location == 'Switzerland') |>
  filter(VehicleType == 'Passenger car') |>
  filter(Date > as.Date('2012-01-01')) |>
  filter(Date < as.Date('2021-12-31'))

# Selecting equivalent columns from the French dataset
french_specific_fuel <- df_v_fr %>%
  select(Date, Diesel_delta, Essence_delta, Conventional_Hybrid_delta, Plug_in_Hybrid_delta, Electrique_delta) # Adjust column names accordingly

# Reshape French dataset to long format for easier plotting
french_specific_fuel_long <- french_specific_fuel %>%
  pivot_longer(cols = -Date, names_to = "Fuel", values_to = "Count")

# Standardize counts in each dataset
swiss_specific_fuel <- swiss_specific_fuel %>%
  mutate(Count = scale(Count))

french_specific_fuel_long <- french_specific_fuel_long %>%
  mutate(Count = scale(Count))

# Rename the 'Fuel' column in the French dataset
french_specific_fuel_long <- french_specific_fuel_long %>%
  mutate(Fuel = case_when(
    Fuel == "Diesel_delta" ~ "Diesel",
    Fuel == "Essence_delta" ~ "Petrol",
    Fuel == "Conventional_Hybrid_delta" ~ "Conventional hybrid",
    Fuel == "Plug_in_Hybrid_delta" ~ "Plug-in hybrid",
    Fuel == "Electrique_delta" ~ "Electricity"
  ))

# Define color palette for each fuel type
fuel_colors <- c("Diesel" = "black", "Electricity" = "green", "Conventional hybrid" = "purple", "Plug-in hybrid" = "blue", "Petrol" = "orange")

p <- ggplot() +
  geom_smooth(data = swiss_specific_fuel, aes(x = Date, y = Count, color = Fuel), 
              method = "loess", se = FALSE, size = 1.5) +
  geom_line(data = french_specific_fuel_long, aes(x = Date, y = Count, color = Fuel), 
            alpha = 0.4, size = 0.8) +
  scale_color_manual(values = fuel_colors, 
                     labels = c("Diesel", "Electricity", "Conventional hybrid", 
                                "Plug-in hybrid", "Petrol"),
                     breaks = c("Diesel", "Electricity", "Conventional hybrid", 
                                "Plug-in hybrid", "Petrol")) +
  labs(x = "Date", y = "Standardized Count", color = "Fuel Type") +
  theme_minimal() +
  geom_text(data = data.frame(x = as.Date("2021-01-01"), y = c(3, 2.8), 
                              label = c("Switzerland has", "the thickest line")), 
            aes(x = x, y = y, label = label, color = label), 
            size = 4, show.legend = FALSE)

# Convert to interactive plot
interactive_plot <- ggplotly(p, width = 600, height = 400)
interactive_plot
```

## 3.7 EV and Google Trends

All in all, the Google trend seems to be in adequation with the actual rise in EVs around Switzerland. 
```{r}
df_v_electric <- df_v |>
  filter(VehicleType == "Passenger car") |>
  filter(Fuel == 'Electricity')
df_electric_vehicles_agg <- df_v_electric %>% group_by(Date) %>% summarize(Count = sum(Count))
# Resample both datasets to a monthly frequency using the first day of the month

# Merge datasets
merged_df <- merge(df_electric_vehicles_agg, df_gtrends, by = "Date")

# Calculate the ratio for the secondary axis
max_count <- max(merged_df$Count, na.rm = TRUE)
max_search <- max(merged_df$SearchRatio, na.rm = TRUE)
ratio <- max_count / max_search

# Plotting with smoothing and color changes
ggplot(merged_df, aes(x = Date)) +
  geom_bar(data = merged_df, aes(x = Date, y = SearchRatio * ratio, color = "Google Trends"), stat = "identity") +
  geom_smooth(aes(y = Count, color = "Electric Vehicles Smoothed"), method = "loess", span = 0.2) +
  scale_y_continuous(
    "Number of Electric Vehicles",
    sec.axis = sec_axis(~ . / ratio, name = "Google Trends")
  ) +
  labs(title = "Comparison of Electric Vehicle Rise and Google Trends Over Time",
       x = "Date", color = "Legend") +
  scale_color_manual(values = c("Electric Vehicles Smoothed" = "blue", "Google Trends" = "darkred")) +
  theme_minimal()
```

## 3.8 EV and Oil Price

The results of the graphic comparing oil price and EVs evolution comforts us in our choice of oil price as an explicative variable. Indeed, the tendency is quite similar since 2020. In fact, the previous years refer to a period where EVs were not as commercialized as today. Obviously, we are aware of the numerous other variables explaining both oil price and EVs rise over time.   

```{r}
df_oil_monthly <- df_oil %>% 
                  mutate(Date = as.Date(format(Date, "%Y-%m-01"))) %>%
                  group_by(Date) %>% 
                  summarize(Price = mean(Price))

df_electric_vehicles_monthly <- df_electric_vehicles_agg %>% 
                               mutate(Date = as.Date(format(Date, "%Y-%m-01"))) %>%
                               group_by(Date) %>% 
                               summarize(Count = sum(Count))

# Merge datasets
df_merged <- full_join(df_electric_vehicles_monthly, df_oil_monthly, by = "Date")

# Calculate the ratio for the secondary axis
max_count <- max(df_merged$Count, na.rm = TRUE)
max_price <- max(df_merged$Price, na.rm = TRUE)
ratio <- max_count / max_price

# Plotting with smoothing and color changes
ggplot(df_merged, aes(x = Date)) +
  geom_smooth(aes(y = Count, color = "Electric Vehicles Smoothed"), method = "loess", span = 0.2) +
  geom_line(aes(y = Price * ratio, color = "Oil Price")) +
  scale_y_continuous(
    "Number of Electric Vehicles",
    sec.axis = sec_axis(~ . / ratio, name = "Oil Price")
  ) +
  labs(title = "Comparison of Electric Vehicle Rise and Oil Prices Over Time",
       x = "Date", color = "Legend") +
  scale_color_manual(values = c("Electric Vehicles Smoothed" = "blue", "Oil Price" = "darkred")) +
  theme_minimal()
```

